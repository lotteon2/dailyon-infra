apiVersion: apps/v1
kind: Deployment
metadata:
  name: payment-deployment
  namespace: dev
  labels:
    app: payment-service
spec:
  # Deployment Spec
  selector:
    # Match mapping pod's label
    matchLabels:
      app: payment-service
  minReadySeconds: 10
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 0
  replicas: 1
  # Pod Spec
  template:
    metadata:
      name: payment-pod
      # Set pod's label
      labels:
        app: payment-service
    spec:
      containers:
        - name: payment-service
          image: akak640/dailyon-payment-service
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          ports:
            - containerPort: 8090
          imagePullPolicy: Always
          # 애플리케이션이 시작된 뒤 초기화 작업이 마무리되어 준비되었는지 검사
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8090
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 2
          # 애플리케이션이 정상 상태를 유지하고 있는지 지속해서 검사
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8090
            initialDelaySeconds: 30
            periodSeconds: 30
            timeoutSeconds: 2
        - name: mysql
          image: mysql:8.0.34
          resources:
            requests:
              memory: "256Mi"
              cpu: "500m"
            limits:
              memory: "512Mi"
              cpu: "1000m"
          ports:
            - containerPort: 3306
          env:
            - name: MYSQL_ROOT_PASSWORD
              value: "11111111"
            - name: MYSQL_DATABASE
              value: payment-service
          volumeMounts:
            - name: payment-initdb
              mountPath: /docker-entrypoint-initdb.d
            - name: mysql-config
              mountPath: /etc/mysql/conf.d
          # 애플리케이션이 시작된 뒤 초기화 작업이 마무리되어 준비되었는지 검사
          readinessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 20
            periodSeconds: 20
          # 애플리케이션이 정상 상태를 유지하고 있는지 지속해서 검사
          livenessProbe:
            tcpSocket:
              port: 3306
            initialDelaySeconds: 20
            periodSeconds: 20
      volumes:
        - name: payment-initdb
          configMap:
            name: payment-initdb-config
        - name: mysql-config
          configMap:
            name: mysql-config
      affinity:
        nodeAffinity:
          # Pod이 존재하지 않다가 처음으로 만들어지는 상태, 이미 실행중인데 nodeSelector가 node에서 제거된다면 계속 실행
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                - key: type
                  operator: In
                  values:
                    - App
                - key: size
                  operator: In
                  values:
                    - Large
                    - Medium